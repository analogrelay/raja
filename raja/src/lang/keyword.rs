#[derive(Copy,Clone,Debug,Eq,PartialEq)]
pub enum Keyword {
    Break,
    Case,
    Catch,
    Class,
    Const,
    Continue,
    Debugger,
    Default,
    Delete,
    Do,
    Else,
    Export,
    Extends,
    Finally,
    For,
    Function,
    If,
    Import,
    In,
    InstanceOf,
    New,
    Return,
    Super,
    Switch,
    This,
    Throw,
    Try,
    TypeOf,
    Var,
    Void,
    While,
    With,
    Yield
}

impl Keyword {
    pub fn get(inp: &str) -> Option<Keyword> {
        match inp {
            "break" => Some(Keyword::Break),
            "case" => Some(Keyword::Case),
            "catch" => Some(Keyword::Catch),
            "class" => Some(Keyword::Class),
            "const" => Some(Keyword::Const),
            "continue" => Some(Keyword::Continue),
            "debugger" => Some(Keyword::Debugger),
            "default" => Some(Keyword::Default),
            "delete" => Some(Keyword::Delete),
            "do" => Some(Keyword::Do),
            "else" => Some(Keyword::Else),
            "export" => Some(Keyword::Export),
            "extends" => Some(Keyword::Extends),
            "finally" => Some(Keyword::Finally),
            "for" => Some(Keyword::For),
            "function" => Some(Keyword::Function),
            "if" => Some(Keyword::If),
            "import" => Some(Keyword::Import),
            "in" => Some(Keyword::In),
            "instanceof" => Some(Keyword::InstanceOf),
            "new" => Some(Keyword::New),
            "return" => Some(Keyword::Return),
            "super" => Some(Keyword::Super),
            "switch" => Some(Keyword::Switch),
            "this" => Some(Keyword::This),
            "throw" => Some(Keyword::Throw),
            "try" => Some(Keyword::Try),
            "typeof" => Some(Keyword::TypeOf),
            "var" => Some(Keyword::Var),
            "void" => Some(Keyword::Void),
            "while" => Some(Keyword::While),
            "with" => Some(Keyword::With),
            "yield" => Some(Keyword::Yield),
            _ => None
        }
    }
}
